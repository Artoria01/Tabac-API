import discord
from discord.ext import commands
from discord.ui import Select, View, Button
from flask import Flask
from threading import Thread
from pymongo import MongoClient
from datetime import datetime
import os
import pytz

# Cr√©e un objet intents avec les intentions par d√©faut
intents = discord.Intents.default()

# Active l'intention pour le contenu des messages
intents.message_content = True

# Cr√©e le bot avec ces intentions
bot = commands.Bot(command_prefix="!", intents=intents)

# R√©cup√®re l'URL de connexion depuis la variable d'environnement
mongo_url = os.getenv('MONGO_URL')

# Cr√©e la connexion MongoDB
client = MongoClient(mongo_url)

# Acc√®de √† la base de donn√©es
db = client['BotAPI']
admins_collection = db['admins']
vehicles_collection = db['vehicles']

# Variable globale pour le message de la liste des v√©hicules
list_message = None

# Ajouter un admin par d√©faut si pas d√©j√† dans la base de donn√©es
def add_default_admin():
    default_admin_id = "652050350454472734"  # ID OWNER
    if admins_collection.count_documents({"_id": default_admin_id}) == 0:
        admins_collection.insert_one({"_id": default_admin_id})

add_default_admin()

# V√©rifier si un utilisateur est admin
def is_admin(user_id):
    return admins_collection.count_documents({"_id": str(user_id)}) > 0

# V√©rifier si un utilisateur est propri√©taire d'un v√©hicule
def is_owner(user_id, plaque):
    vehicle = vehicles_collection.find_one({"plaque": plaque})
    return vehicle and vehicle["owner_id"] == user_id

# Fonction pour formater la date avec l'heure en fuseau horaire de Paris
def format_date(date_str):
    if date_str:
        # Convertir la cha√Æne en datetime
        date_time = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
        return date_time.strftime('%H:%M - %d/%m')  # Format horaire souhait√©
    return "Inconnu"

# Fonction pour cr√©er l'embed de la liste des v√©hicules
def create_vehicle_embed():
    embed = discord.Embed(title="Liste des v√©hicules", color=discord.Color.blue())
    vehicles = vehicles_collection.find()
    if not vehicles:
        embed.add_field(name="Aucun v√©hicule", value="`Il n'y a aucun v√©hicule enregistr√©.`")
    else:
        for vehicle in vehicles:
            emoji = "üî¥" if vehicle["state"] == "garage" else "üîµ"
            owner = vehicle['owner']
            details = [f"Propri√©taire : `{owner}`", f"√âtat : `{vehicle['state']}`"]

            if vehicle.get('personnel') == 'oui':
                last_changed = vehicle.get('last_changed_date')
                if last_changed:
                    details.append(f"Dernier changement le : `{format_date(last_changed)}`")
            else:
                details.append(f"üÖøÔ∏é** ‚îÑ‚îÑ V√©hicule Public ‚îÑ‚îÑ **üÖøÔ∏é")
                last_changed_by = vehicle.get('last_changed_by', "`Inconnu`")
                details.append(f"Dernier changement par : `{last_changed_by}`")
                last_changed = vehicle.get('last_changed_date')
                if last_changed:
                    details.append(f"Dernier changement le : `{format_date(last_changed)}`")
                else:
                    details.append("Dernier changement le : `Non d√©fini`")

            # Ajouter les champs √† l'embed
            embed.add_field(name=f"{emoji} Plaque : `{vehicle['plaque']}`", value="\n".join(details), inline=False)
            embed.add_field(name="‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", value="", inline=False)
    return embed

# Fonction pour mettre √† jour l'embed de la liste des v√©hicules
async def update_list_message():
    global list_message
    # Si list_message existe d√©j√†, tenter de le r√©√©diter, sinon le cr√©er
    if list_message:
        try:
            embed = create_vehicle_embed()
            await list_message.edit(embed=embed)
        except discord.NotFound:
            print("Le message de la liste des v√©hicules a expir√© ou a √©t√© supprim√©, cr√©ation d'un nouveau.")
            # Recr√©er un message si l'ancien a √©t√© supprim√©
            list_message = await list_message.channel.send(embed=create_vehicle_embed())
    else:
        print("Le message de la liste des v√©hicules n'a pas encore √©t√© envoy√©, cr√©ation d'un nouveau.")
        # Trouver un canal pour envoyer le message (remplacer par ton ID de canal)
        channel = bot.get_channel(1322671748537258014)  # Remplace TON_CANAL_ID par l'ID de ton canal
        if channel:
            list_message = await channel.send(embed=create_vehicle_embed())

    # Mettre √† jour les options du menu d√©roulant
    select = Select(
        placeholder="Choisissez un v√©hicule",
        options=[discord.SelectOption(label=f"Plaque: {vehicle['plaque']}", value=vehicle['plaque']) for vehicle in vehicles_collection.find()]
    )

    # Callback pour la s√©lection du v√©hicule
    async def select_callback(interaction):
        selected_plaque = select.values[0]
        vehicle = vehicles_collection.find_one({"plaque": selected_plaque})

        # V√©rifier si l'utilisateur est admin ou propri√©taire
        if not (is_admin(interaction.user.id) or is_owner(interaction.user.id, selected_plaque)):
            await interaction.response.send_message("‚ùå Vous n'avez pas la permission de modifier l'√©tat de ce v√©hicule.", ephemeral=True)
            return

        # Cr√©ation d'un menu d√©roulant pour changer l'√©tat du v√©hicule
        state_select = Select(
            placeholder="S√©lectionnez l'√©tat du v√©hicule",
            options=[
                discord.SelectOption(label="Garage", value="garage"),
                discord.SelectOption(label="Sorti", value="sorti")
            ],
            custom_id=selected_plaque  # Passer la plaque via custom_id
        )

        # Lier la callback √† la s√©lection de l'√©tat
        state_select.callback = state_select_callback

        # Afficher le menu d√©roulant pour la modification de l'√©tat
        view = View(timeout=None)
        view.add_item(state_select)

        await interaction.response.send_message("S√©lectionnez un nouvel √©tat pour ce v√©hicule.", view=view, ephemeral=True)

    select.callback = select_callback
    view = View(timeout=None)
    view.add_item(select)

    # Mettre √† jour le message avec le menu de s√©lection du v√©hicule
    await list_message.edit(view=view)

    await update_bot_activity()

# Fonction pour mettre √† jour l'activit√© du bot
async def update_bot_activity():
    total_garage = vehicles_collection.count_documents({"state": "garage"})
    total_sorti = vehicles_collection.count_documents({"state": "sorti"})
    activity = discord.Game(f"üî¥ {total_garage} rang√©s | üîµ {total_sorti} sortis")
    await bot.change_presence(activity=activity)

# Commande pour ajouter un v√©hicule
@bot.tree.command(name="add_vehicle", description="Ajoutez un v√©hicule pour un membre (Admin uniquement)")
async def add_vehicle(interaction: discord.Interaction, plaque: str, member: discord.Member, personnel: str):
    if not is_admin(interaction.user.id):
        await interaction.response.send_message("‚ùå Vous n'avez pas la permission d'ajouter un v√©hicule.", ephemeral=True)
        return
    if vehicles_collection.count_documents({"plaque": plaque}) > 0:
        await interaction.response.send_message(f"‚ö†Ô∏è Le v√©hicule avec la plaque {plaque} existe d√©j√†.", ephemeral=True)
        return
    vehicle = {
        "plaque": plaque,
        "owner": member.name,
        "owner_id": member.id,
        "state": "garage",
        "personnel": personnel.lower(),
        "last_changed_by": interaction.user.name,
        "last_changed_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    vehicles_collection.insert_one(vehicle)
    await update_list_message()  # Mettre √† jour le menu d√©roulant apr√®s l'ajout
    await interaction.response.send_message(f"‚úÖ V√©hicule {plaque} ajout√© avec succ√®s.", ephemeral=True)

# Commande pour supprimer un v√©hicule
@bot.tree.command(name="remove_vehicle", description="Supprimez un v√©hicule existant (Admin uniquement)")
async def remove_vehicle(interaction: discord.Interaction, plaque: str):
    if not is_admin(interaction.user.id):
        await interaction.response.send_message("‚ùå Vous n'avez pas la permission de supprimer un v√©hicule.", ephemeral=True)
        return
    if vehicles_collection.count_documents({"plaque": plaque}) == 0:
        await interaction.response.send_message(f"‚ö†Ô∏è Aucun v√©hicule trouv√© avec la plaque {plaque}.", ephemeral=True)
        return
    vehicles_collection.delete_one({"plaque": plaque})
    await update_list_message()  # Mettre √† jour le menu d√©roulant apr√®s la suppression
    await interaction.response.send_message(f"‚úÖ V√©hicule {plaque} supprim√© avec succ√®s.", ephemeral=True)

# Fonction pour changer l'√©tat d'un v√©hicule
@bot.tree.command(name="change_vehicle_state", description="Changez l'√©tat d'un v√©hicule (Admin uniquement)")
async def change_vehicle_state(interaction: discord.Interaction, plaque: str, new_state: str):
    if not is_admin(interaction.user.id):
        await interaction.response.send_message("‚ùå Vous n'avez pas la permission de modifier l'√©tat d'un v√©hicule.", ephemeral=True)
        return
    vehicle = vehicles_collection.find_one({"plaque": plaque})
    if not vehicle:
        await interaction.response.send_message(f"‚ö†Ô∏è Aucun v√©hicule trouv√© avec la plaque {plaque}.", ephemeral=True)
        return
    if new_state not in ["garage", "sorti"]:
        await interaction.response.send_message("‚ö†Ô∏è √âtat invalide. Choisissez entre 'garage' ou 'sorti'.", ephemeral=True)
        return

    # Obtenir l'heure actuelle en heure fran√ßaise
    paris_tz = pytz.timezone('Europe/Paris')
    current_time = datetime.now(paris_tz).strftime("%Y-%m-%d %H:%M:%S")

    # Mettre √† jour l'√©tat du v√©hicule
    vehicles_collection.update_one(
        {"plaque": plaque}, 
        {
            "$set": {
                "state": new_state,
                "last_changed_by": interaction.user.name,  # Met √† jour la personne ayant fait la modification
                "last_changed_date": current_time  # Met √† jour la date du changement en heure locale fran√ßaise
            }
        }
    )
    await update_list_message()
    await interaction.response.send_message(f"‚úÖ √âtat du v√©hicule {plaque} modifi√© en {new_state}.", ephemeral=True)

# Callback pour la s√©lection de l'√©tat dans le menu d√©roulant
async def state_select_callback(interaction):
    selected_plaque = interaction.data["custom_id"]  # Utilisation de custom_id pour obtenir la plaque
    new_state = interaction.data["values"][0]  # L'√©tat s√©lectionn√©

    # Obtenir l'heure actuelle en heure fran√ßaise
    paris_tz = pytz.timezone('Europe/Paris')
    current_time = datetime.now(paris_tz).strftime("%Y-%m-%d %H:%M:%S")

    # Mettre √† jour l'√©tat dans la base de donn√©es avec les nouvelles informations
    vehicles_collection.update_one(
        {"plaque": selected_plaque},
        {
            "$set": {
                "state": new_state,
                "last_changed_by": interaction.user.name,  # Mise √† jour de la personne qui a effectu√© la modification
                "last_changed_date": current_time  # Mise √† jour de la date avec l'heure locale fran√ßaise
            }
        }
    )

    # Mettre √† jour le message de la liste des v√©hicules
    await update_list_message()
    await interaction.response.send_message(f"‚úÖ L'√©tat du v√©hicule {selected_plaque} a √©t√© modifi√© en {new_state}.", ephemeral=True)

# Commande pour voir la liste des v√©hicules
@bot.command()
async def list_vehicles(ctx):
    global list_message
    embed = create_vehicle_embed()
    message = await ctx.send(embed=embed)
    list_message = message

    # Cr√©ation du menu d√©roulant pour choisir un v√©hicule
    select = Select(
        placeholder="Choisissez un v√©hicule",
        options=[discord.SelectOption(label=f"Plaque: {vehicle['plaque']}", value=vehicle['plaque']) for vehicle in vehicles_collection.find()]
    )

    # Callback pour la s√©lection du v√©hicule
    async def select_callback(interaction):
        selected_plaque = select.values[0]
        vehicle = vehicles_collection.find_one({"plaque": selected_plaque})

        # V√©rifier si l'utilisateur est admin ou propri√©taire
        if not (is_admin(interaction.user.id) or is_owner(interaction.user.id, selected_plaque)):
            await interaction.response.send_message("‚ùå Vous n'avez pas la permission de modifier l'√©tat de ce v√©hicule.", ephemeral=True)
            return

        # Cr√©ation d'un menu d√©roulant pour changer l'√©tat du v√©hicule
        state_select = Select(
            placeholder="S√©lectionnez l'√©tat du v√©hicule",
            options=[
                discord.SelectOption(label="Garage", value="garage"),
                discord.SelectOption(label="Sorti", value="sorti")
            ],
            custom_id=selected_plaque  # Passer la plaque via custom_id
        )

        # Lier la callback √† la s√©lection de l'√©tat
        state_select.callback = state_select_callback

        # Afficher le menu d√©roulant pour la modification de l'√©tat
        view = View(timeout=None)
        view.add_item(state_select)

        await interaction.response.send_message("S√©lectionnez un nouvel √©tat pour ce v√©hicule.", view=view, ephemeral=True)

    select.callback = select_callback
    view = View(timeout=None)
    view.add_item(select)

    # Mettre √† jour le message avec le menu de s√©lection du v√©hicule
    await message.edit(view=view)

# Synchroniser les commandes Slash √† chaque d√©marrage
@bot.event
async def on_ready():
    await bot.tree.sync()
    await update_bot_activity()
    print(f'{bot.user} est pr√™t et les commandes Slash sont synchronis√©es.')

# Garder le bot actif
app = Flask('')

@app.route('/')
def home():
    return "Le bot fonctionne !"

def run():
    app.run(host='0.0.0.0', port=8080)

Thread(target=run).start()

# Lancer le bot
bot.run(os.getenv("DISCORD_TOKEN"))
