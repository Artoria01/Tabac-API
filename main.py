import discord
from discord.ext import commands
import json
import os
from discord.ui import Select, View
from flask import Flask
from threading import Thread

# Cr√©ation du bot
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix="!", intents=intents)

# Fichiers de sauvegarde
DATA_FILE = "vehicles.json"
ADMINS_FILE = "admins.json"

# Charger ou sauvegarder les donn√©es
def load_json(filename):
    if not os.path.exists(filename):
        return {}
    with open(filename, "r") as f:
        return json.load(f)

def save_json(filename, data):
    with open(filename, "w") as f:
        json.dump(data, f, indent=4)

vehicles = load_json(DATA_FILE)
admins = load_json(ADMINS_FILE)

# Variable globale pour le message de la liste des v√©hicules
list_message = None

# Ajouter un admin par d√©faut si pas d√©j√† dans le fichier
def add_default_admin():
    default_admin_id = "652050350454472734"  # ID OWNER
    if default_admin_id not in admins:
        admins[default_admin_id] = {}
        save_json(ADMINS_FILE, admins)

add_default_admin()

# V√©rifier si un utilisateur est admin
def is_admin(user_id):
    return str(user_id) in admins  # Utiliser str() pour la comparaison

# V√©rifier si un utilisateur est propri√©taire d'un v√©hicule
def is_owner(user_id, plaque):
    return plaque in vehicles and vehicles[plaque]["owner_id"] == user_id

# Fonction pour cr√©er l'embed de la liste des v√©hicules
def create_vehicle_embed():
    embed = discord.Embed(title="Liste des v√©hicules", color=discord.Color.blue())
    if not vehicles:
        embed.add_field(name="Aucun v√©hicule", value="Il n'y a aucun v√©hicule enregistr√©.")
    else:
        for plaque, info in vehicles.items():
            emoji = "üî¥" if info["state"] == "garage" else "üîµ"

            owner = info['owner']
            member = None

            # Parcours des guildes o√π le bot est pr√©sent pour r√©cup√©rer le membre
            for guild in bot.guilds:
                member = guild.get_member(info['owner_id'])
                if member:
                    break

            # Si le membre est trouv√©, on utilise son 'nick' (pseudo sp√©cifique au serveur) ou son 'name' (nom global)
            if member:
                owner = member.nick if member.nick else member.name
            else:
                # Si le membre n'est pas trouv√©, utiliser l'info sauvegard√©e (propri√©taire par d√©faut)
                owner = info['owner']  

            embed.add_field(
                name=f"{emoji} Plaque : `{plaque}`",
                value=f"Propri√©taire : `{owner}`\n√âtat : `{info['state']}`",
                inline=False
            )

    return embed

# Fonction pour mettre √† jour l'embed de la liste des v√©hicules
async def update_list_message():
    global list_message
    if list_message:
        try:
            # Tente de r√©√©diter l'embed existant si le message est toujours pr√©sent
            embed = create_vehicle_embed()
            await list_message.edit(embed=embed)
        except discord.NotFound:
            # Si le message a √©t√© supprim√© (embed expir√©), on le recr√©e
            print("Le message de la liste des v√©hicules a expir√© ou a √©t√© supprim√©, cr√©ation d'un nouveau.")
            list_message = await list_message.channel.send(embed=create_vehicle_embed())
    else:
        # Si list_message est None (pas encore de message), cr√©er un message
        print("Le message de la liste des v√©hicules n'a pas encore √©t√© envoy√©, cr√©ation d'un nouveau.")
        list_message = await list_message.channel.send(embed=create_vehicle_embed())

    # Mettre √† jour l'activit√© du bot
    await update_bot_activity()

# Fonction pour mettre √† jour l'activit√© du bot
async def update_bot_activity():
    total_garage = sum(1 for v in vehicles.values() if v["state"] == "garage")
    total_sorti = sum(1 for v in vehicles.values() if v["state"] == "sorti")
    activity = discord.Game(f"üî¥ {total_garage} rang√©s | üîµ {total_sorti} sortis")
    await bot.change_presence(activity=activity)

# Commande pour ajouter un v√©hicule
@bot.tree.command(name="add_vehicle", description="Ajoutez un v√©hicule pour un membre (Admin uniquement)")
async def add_vehicle(interaction: discord.Interaction, plaque: str, member: discord.Member):
    if not is_admin(interaction.user.id):
        await interaction.response.send_message("‚ùå Vous n'avez pas la permission d'ajouter un v√©hicule.", ephemeral=True)
        return
    if plaque in vehicles:
        await interaction.response.send_message(f"‚ö†Ô∏è Le v√©hicule avec la plaque {plaque} existe d√©j√†.", ephemeral=True)
        return
    vehicles[plaque] = {"owner": member.name, "owner_id": member.id, "state": "garage"}
    save_json(DATA_FILE, vehicles)

    await update_list_message()
    await interaction.response.send_message(f"‚úÖ V√©hicule `{plaque}` ajout√© avec succ√®s.", ephemeral=True)

# Commande pour supprimer un v√©hicule
@bot.tree.command(name="remove_vehicle", description="Supprimez un v√©hicule existant (Admin uniquement)")
async def remove_vehicle(interaction: discord.Interaction, plaque: str):
    if not is_admin(interaction.user.id):
        await interaction.response.send_message("‚ùå Vous n'avez pas la permission de supprimer un v√©hicule.", ephemeral=True)
        return
    if plaque not in vehicles:
        await interaction.response.send_message(f"‚ö†Ô∏è Aucun v√©hicule trouv√© avec la plaque {plaque}.", ephemeral=True)
        return
    del vehicles[plaque]
    save_json(DATA_FILE, vehicles)

    await update_list_message()
    await interaction.response.send_message(f"‚úÖ V√©hicule `{plaque}` supprim√© avec succ√®s.", ephemeral=True)

# Commande pour changer l'√©tat d'un v√©hicule
@bot.tree.command(name="change_vehicle_state", description="Changez l'√©tat d'un v√©hicule (Admin uniquement)")
async def change_vehicle_state(interaction: discord.Interaction, plaque: str, new_state: str):
    if not is_admin(interaction.user.id):
        await interaction.response.send_message("‚ùå Vous n'avez pas la permission de modifier l'√©tat d'un v√©hicule.", ephemeral=True)
        return
    if plaque not in vehicles:
        await interaction.response.send_message(f"‚ö†Ô∏è Aucun v√©hicule trouv√© avec la plaque {plaque}.", ephemeral=True)
        return
    if new_state not in ["garage", "sorti"]:
        await interaction.response.send_message("‚ö†Ô∏è √âtat invalide. Choisissez entre 'garage' ou 'sorti'.", ephemeral=True)
        return

    vehicles[plaque]["state"] = new_state
    save_json(DATA_FILE, vehicles)

    await update_list_message()
    await interaction.response.send_message(f"‚úÖ √âtat du v√©hicule `{plaque}` modifi√© en `{new_state}`.", ephemeral=True)

# Commande pour voir la liste des v√©hicules
@bot.command()
async def list_vehicles(ctx):
    global list_message

    embed = create_vehicle_embed()
    message = await ctx.send(embed=embed)

    # Sauvegarder le message pour les mises √† jour futures
    list_message = message

    # Ajouter un menu d√©roulant pour choisir un v√©hicule
    select = Select(
        placeholder="Choisissez un v√©hicule",
        options=[discord.SelectOption(label=f"Plaque: {plaque}", value=plaque) for plaque in vehicles]
    )

    async def select_callback(interaction):
        selected_plaque = select.values[0]
        vehicle = vehicles[selected_plaque]

        # V√©rifier si l'utilisateur est admin ou propri√©taire du v√©hicule
        if not (is_admin(interaction.user.id) or is_owner(interaction.user.id, selected_plaque)):
            await interaction.response.send_message("‚ùå Vous n'avez pas la permission de modifier l'√©tat de ce v√©hicule.", ephemeral=True)
            return

        # Cr√©er un menu d√©roulant pour choisir l'√©tat
        state_select = Select(
            placeholder="S√©lectionnez l'√©tat du v√©hicule",
            options=[
                discord.SelectOption(label="Garage", value="garage"),
                discord.SelectOption(label="Sorti", value="sorti")
            ]
        )

        async def state_select_callback(interaction):
            new_state = state_select.values[0]
            vehicles[selected_plaque]["state"] = new_state
            save_json(DATA_FILE, vehicles)

            await update_list_message()
            await interaction.response.send_message(f"‚úÖ L'√©tat du v√©hicule `{selected_plaque}` a √©t√© modifi√© en `{new_state}`.", ephemeral=True)

        state_select.callback = state_select_callback
        view = View(timeout=None)  # Le menu ne va jamais expirer
        view.add_item(state_select)

        await interaction.response.send_message("S√©lectionnez un nouvel √©tat pour ce v√©hicule.", view=view, ephemeral=True)

    select.callback = select_callback
    view = View(timeout=None)  # Le menu ne va jamais expirer
    view.add_item(select)

    await message.edit(view=view)

# Synchroniser les commandes Slash √† chaque d√©marrage
@bot.event
async def on_ready():
    await bot.tree.sync()
    await update_bot_activity()
    print(f'{bot.user} est pr√™t et les commandes Slash sont synchronis√©es.')

# Garder le bot actif
app = Flask('')

@app.route('/')
def home():
    return "Le bot fonctionne !"

def run():
    app.run(host='0.0.0.0', port=8080)

Thread(target=run).start()

# Lancer le bot
bot.run(os.getenv("DISCORD_TOKEN"))
