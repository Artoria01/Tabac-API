import discord
from discord.ext import commands
from discord.ui import Select, View, Button
from datetime import datetime
from flask import Flask
from threading import Thread
from pymongo import MongoClient
import os
import asyncio
import pytz

# Cr√©e un objet intents avec les intentions par d√©faut
intents = discord.Intents.default()

# Active l'intention pour le contenu des messages
intents.message_content = True

# Cr√©e le bot avec ces intentions
bot = commands.Bot(command_prefix="!", intents=intents)

# R√©cup√®re l'URL de connexion depuis la variable d'environnement
mongo_url = os.getenv('MONGO_URL')

# Cr√©e la connexion MongoDB
client = MongoClient(mongo_url)

# Acc√®de √† la base de donn√©es
db = client['BotAPI']
admins_collection = db['admins']
vehicles_collection = db['vehicles']

# Variable globale pour le message de la liste des v√©hicules
list_message = None
current_page = 1

# Ajouter un admin par d√©faut si pas d√©j√† dans la base de donn√©es
def add_default_admin():
    default_admin_id = "652050350454472734"  # ID OWNER
    if admins_collection.count_documents({"_id": default_admin_id}) == 0:
        admins_collection.insert_one({"_id": default_admin_id})

add_default_admin()

# V√©rifier si un utilisateur est admin
def is_admin(user_id):
    return admins_collection.count_documents({"_id": str(user_id)}) > 0

# V√©rifier si un utilisateur est propri√©taire d'un v√©hicule
def is_owner(user_id, plaque):
    vehicle = vehicles_collection.find_one({"plaque": plaque})
    return vehicle and vehicle["owner_id"] == user_id

# Fonction pour cr√©er l'embed de la liste des v√©hicules avec "Modifier par"
def create_vehicle_embed(page_number=1):
    embed = discord.Embed(title="Liste des v√©hicules", color=discord.Color.blue())

    vehicles = vehicles_collection.find().skip((page_number - 1) * 10).limit(10)  # Affiche les v√©hicules de la page
    if not vehicles:
        embed.add_field(name="Aucun v√©hicule", value="Il n'y a aucun v√©hicule enregistr√©.")
    else:
        for vehicle in vehicles:
            emoji = "üî¥" if vehicle["state"] == "garage" else "üîµ"
            owner = vehicle['owner']
            last_changed = vehicle.get("last_changed", "`Non d√©fini`")  # Utilise la date de changement stock√©e
            modified_by = vehicle.get("last_modified_by", "`Non d√©fini`")  # Derni√®re personne √† avoir modifi√© l'√©tat
            public = "Oui" if vehicle.get("public", False) else "Non"  # V√©rifier si le v√©hicule est public

            embed.add_field(
                name=f"{emoji} Plaque : `{vehicle['plaque']}`",
                value=(
                    f"Propri√©taire : `{owner}`\n"
                    f"√âtat : `{vehicle['state']}`\n"
                    f"Derni√®re modification le : {last_changed}\n"
                    f"Modifi√© par : `{modified_by}`\n"
                    f"V√©hicule public : `{public}`\n"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                inline=False
            )

    # Ajouter les boutons de pagination
    total_pages = calculate_total_pages()
    embed.set_footer(text=f"Page {page_number}/{total_pages}")

    return embed

# Dictionnaire pour g√©rer les verrous par message avec asyncio.Lock()
pagination_locks = {}

# Fonction pour verrouiller un message avec d√©lai d'attente
async def lock_pagination(message_id, timeout=5):
    if message_id not in pagination_locks:
        pagination_locks[message_id] = asyncio.Lock()

    lock = pagination_locks[message_id]

    # Tente de verrouiller l'acc√®s au message avec un d√©lai d'attente
    try:
        await asyncio.wait_for(lock.acquire(), timeout)
        return lock
    except asyncio.TimeoutError:
        return None  # Si le d√©lai est d√©pass√©, retourner None

# Fonction pour d√©verrouiller un message sp√©cifique
def unlock_pagination(message_id):
    lock = pagination_locks.get(message_id)
    if lock:
        lock.release()

# Fonction de mise √† jour de la liste avec gestion du verrou
async def update_vehicle_list(ctx, page_number=1):
    global current_page, list_message
    current_page = page_number

    if list_message:
        lock = await lock_pagination(list_message.id)  # Acquiert le verrou

    try:
        embed = create_vehicle_embed(page_number)

        # Cr√©er les boutons de pagination
        prev_button = Button(label="‚óÄÔ∏è Pr√©c√©dent", style=discord.ButtonStyle.primary, disabled=page_number == 1)
        next_button = Button(label="Suivant ‚ñ∂Ô∏è", style=discord.ButtonStyle.primary, disabled=page_number == calculate_total_pages())

        # Callback pour les boutons
        async def prev_callback(interaction):
            await interaction.response.defer()
            await update_vehicle_list(ctx, page_number - 1)

        async def next_callback(interaction):
            await interaction.response.defer()
            await update_vehicle_list(ctx, page_number + 1)

        prev_button.callback = prev_callback
        next_button.callback = next_callback

        # Cr√©er la vue et ajouter les boutons
        view = View(timeout=None)
        view.add_item(prev_button)
        view.add_item(next_button)

        if list_message:
            await list_message.edit(embed=embed, view=view)
        else:
            # Si le message n'existe pas encore, l'envoyer
            message = await ctx.send(embed=embed, view=view)
            list_message = message

    finally:
        unlock_pagination(list_message.id)  # Lib√®re toujours le verrou apr√®s l'op√©ration

# Fonction pour g√©rer la pagination avec un menu d√©roulant
async def update_vehicle_list_with_dropdown(ctx, page_number=1):
    global current_page, list_message
    current_page = page_number

    embed = create_vehicle_embed(page_number)
    vehicles = list(vehicles_collection.find().skip((page_number - 1) * 10).limit(10))  # R√©cup√©rer les v√©hicules de la page

    # Cr√©er un select menu avec les v√©hicules de la page
    select = Select(
        placeholder="Choisissez un v√©hicule",
        options=[discord.SelectOption(label=f"Plaque: {vehicle['plaque']}", value=vehicle['plaque']) for vehicle in vehicles]
    )

    # Fonction pour g√©rer la s√©lection du nouvel √©tat pour les v√©hicules publics
    async def select_callback(interaction):
        selected_plaque = select.values[0]
        vehicle = vehicles_collection.find_one({"plaque": selected_plaque})

        # V√©rifie si le v√©hicule est public ou si l'utilisateur est admin/poss√®de le v√©hicule
        if not (vehicle.get("public", False) or is_admin(interaction.user.id) or is_owner(interaction.user.id, selected_plaque)):
            await interaction.response.send_message("‚ùå Vous n'avez pas la permission de modifier l'√©tat de ce v√©hicule.", ephemeral=True)
            return

        # Affichage du menu pour modifier l'√©tat
        state_select = Select(
            placeholder="S√©lectionnez l'√©tat du v√©hicule",
            options=[
                discord.SelectOption(label="Garage", value="garage"),
                discord.SelectOption(label="Sorti", value="sorti")
            ]
        )

        async def state_select_callback(interaction):
            new_state = state_select.values[0]
            vehicles_collection.update_one(
                {"plaque": selected_plaque}, 
                {"$set": {
                    "state": new_state, 
                    "last_changed": get_french_time(), 
                    "last_modified_by": interaction.user.name
                }}
            )
            await update_vehicle_list_with_dropdown(interaction, current_page)
            await update_bot_activity()  # Met √† jour l'activit√© du bot apr√®s modification
            await interaction.response.send_message(f"‚úÖ L'√©tat du v√©hicule {selected_plaque} a √©t√© modifi√© en {new_state}.", ephemeral=True)

        state_select.callback = state_select_callback
        view = View(timeout=None)
        view.add_item(state_select)

        await interaction.response.send_message("S√©lectionnez un nouvel √©tat pour ce v√©hicule.", view=view, ephemeral=True)

    select.callback = select_callback
    view = View(timeout=None)
    view.add_item(select)

    # Cr√©er les boutons de pagination
    prev_button = Button(label="‚óÄÔ∏è Pr√©c√©dent", style=discord.ButtonStyle.primary, disabled=page_number == 1)
    next_button = Button(label="Suivant ‚ñ∂Ô∏è", style=discord.ButtonStyle.primary, disabled=page_number == calculate_total_pages())

    async def prev_callback(interaction):
        await interaction.response.defer()
        await update_vehicle_list_with_dropdown(ctx, page_number - 1)

    async def next_callback(interaction):
        await interaction.response.defer()
        await update_vehicle_list_with_dropdown(ctx, page_number + 1)

    prev_button.callback = prev_callback
    next_button.callback = next_callback

    # Ajouter les boutons √† la vue
    view.add_item(prev_button)
    view.add_item(next_button)

    # V√©rification si list_message existe
    if list_message is None:
        # Si list_message n'existe pas encore, l'envoyer
        message = await ctx.send(embed=embed, view=view)
        list_message = message
    else:
        try:
            # Si list_message existe, il est mis √† jour avec le nouvel embed et vue
            await list_message.edit(embed=embed, view=view)
            print("Message de la liste mis √† jour.")
        except discord.errors.NotFound:
            # Si le message a √©t√© supprim√©, on envoie un nouveau message
            list_message = await ctx.send(embed=embed, view=view)
            print("Le message a √©t√© supprim√©, un nouveau message est envoy√©.")

# Commande pour voir la liste des v√©hicules avec pagination et menu d√©roulant
@bot.command()
async def list_vehicles(ctx):
    await update_vehicle_list_with_dropdown(ctx, page_number=1)

# Fonction pour mettre √† jour l'activit√© du bot
async def update_bot_activity():
    total_garage = vehicles_collection.count_documents({"state": "garage"})
    total_sorti = vehicles_collection.count_documents({"state": "sorti"})
    activity = discord.Game(f"üî¥ {total_garage} rang√©s | üîµ {total_sorti} sortis")
    await bot.change_presence(activity=activity)

# Commande pour ajouter un v√©hicule
@bot.tree.command(name="add_vehicle", description="Ajoutez un v√©hicule pour un membre (Admin uniquement)")
async def add_vehicle(interaction: discord.Interaction, plaque: str, member: discord.Member):
    if not is_admin(interaction.user.id):
        await interaction.response.send_message("‚ùå Vous n'avez pas la permission d'ajouter un v√©hicule.", ephemeral=True)
        return
    if vehicles_collection.count_documents({"plaque": plaque}) > 0:
        await interaction.response.send_message(f"‚ö†Ô∏è Le v√©hicule avec la plaque {plaque} existe d√©j√†.", ephemeral=True)
        return
    vehicles_collection.insert_one({"plaque": plaque, "owner": member.name, "owner_id": member.id, "state": "garage"})
    await update_vehicle_list_with_dropdown(interaction, page_number=1)  # Remplace ici
    await update_bot_activity()  # Met √† jour l'activit√© du bot apr√®s ajout
    await interaction.response.send_message(f"‚úÖ V√©hicule {plaque} ajout√© avec succ√®s.", ephemeral=True)

# Commande pour supprimer un v√©hicule
@bot.tree.command(name="remove_vehicle", description="Supprimez un v√©hicule existant (Admin uniquement)")
async def remove_vehicle(interaction: discord.Interaction, plaque: str):
    if not is_admin(interaction.user.id):
        await interaction.response.send_message("‚ùå Vous n'avez pas la permission de supprimer un v√©hicule.", ephemeral=True)
        return
    if vehicles_collection.count_documents({"plaque": plaque}) == 0:
        await interaction.response.send_message(f"‚ö†Ô∏è Aucun v√©hicule trouv√© avec la plaque {plaque}.", ephemeral=True)
        return
    vehicles_collection.delete_one({"plaque": plaque})
    await update_vehicle_list_with_dropdown(interaction, page_number=1)  # Remplace ici
    await update_bot_activity()  # Met √† jour l'activit√© du bot apr√®s suppression
    await interaction.response.send_message(f"‚úÖ V√©hicule {plaque} supprim√© avec succ√®s.", ephemeral=True)

# Commande pour rendre un v√©hicule public ou le retirer de la visibilit√© publique
@bot.tree.command(name="public", description="Rendre un v√©hicule public ou retirer sa visibilit√© publique (Admin uniquement)")
async def make_public(interaction: discord.Interaction, plaque: str):
    if not is_admin(interaction.user.id):
        await interaction.response.send_message("‚ùå Vous n'avez pas la permission de modifier la visibilit√© publique d'un v√©hicule.", ephemeral=True)
        return

    vehicle = vehicles_collection.find_one({"plaque": plaque})
    if not vehicle:
        await interaction.response.send_message(f"‚ö†Ô∏è Aucun v√©hicule trouv√© avec la plaque {plaque}.", ephemeral=True)
        return

    # V√©rifier si le v√©hicule est d√©j√† public
    is_public = vehicle.get("public", False)

    # Inverser l'√©tat de "public" : si le v√©hicule est public, on le rend priv√©, sinon on le rend public
    new_public_state = not is_public

    # Mettre √† jour le champ "public" du v√©hicule
    vehicles_collection.update_one(
        {"plaque": plaque},
        {"$set": {"public": new_public_state}}
    )

    # R√©pondre avec un message selon le nouvel √©tat du v√©hicule
    if new_public_state:
        await interaction.response.send_message(f"‚úÖ Le v√©hicule {plaque} est maintenant public.", ephemeral=True)
    else:
        await interaction.response.send_message(f"‚úÖ Le v√©hicule {plaque} n'est plus public.", ephemeral=True)

    # Mettre √† jour la liste des v√©hicules et l'activit√© du bot
    await update_vehicle_list_with_dropdown(interaction, page_number=1)
    await update_bot_activity()  # Met √† jour l'activit√© du bot apr√®s modification



# Garder l'activit√© du bot √† jour √† chaque d√©marrage
@bot.event
async def on_ready():
    await bot.tree.sync()
    await update_bot_activity()  # Met √† jour l'activit√© du bot d√®s le d√©marrage
    print(f'{bot.user} est pr√™t et les commandes Slash sont synchronis√©es.')

# Garder le bot actif
app = Flask('')

@app.route('/')
def home():
    return "Le bot fonctionne !"

def run():
    app.run(host='0.0.0.0', port=8080)

Thread(target=run).start()

# Lancer le bot
bot.run(os.getenv("DISCORD_TOKEN"))
